-- Rael Hub
-- Feito para Delta Executor
-- Organizado em Abas: Movement, Visual, Protections, Target, Configurações

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Lighting = game:GetService("Lighting")
local Workspace = game:GetService("Workspace")

-- Estado
local state = {
    infiniteJump = false,
    fly = false,
    flySpeed = 2,
    walkspeedBoost = 16,
    noclip = false,
    fullbright = false,
    target = nil,
    gravity = Workspace.Gravity
}

-- Função de notify
local function notify(msg)
    Rayfield:Notify({Title="Rael Hub", Content=msg, Duration=3})
end

-- Função copiar avatar
local function copyAvatar(target)
    if target and target.Character and target.Character:FindFirstChild("HumanoidDescription") then
        local desc = target.Character.Humanoid:FindFirstChildOfClass("HumanoidDescription")
        if desc then
            game.Players:CreateHumanoidModelFromDescription(desc, Enum.HumanoidRigType.R15).Parent = workspace
        end
    end
end

-- Criação da Janela
local Window = Rayfield:CreateWindow({
    Name = "Rael Hub",
    LoadingTitle = "Rael Hub",
    LoadingSubtitle = "by Rael",
    ConfigurationSaving = {Enabled = true, FolderName = nil, FileName = "RaelHubConfig"}
})

----------------------------------------------------
-- MOVEMENT
----------------------------------------------------
local TabMovement = Window:CreateTab("Movement")

-- Infinite Jump
TabMovement:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Callback = function(val)
        state.infiniteJump = val
    end
})
UserInputService.JumpRequest:Connect(function()
    if state.infiniteJump and LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
        LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
    end
end)

-- Fly
TabMovement:CreateToggle({
    Name = "Fly",
    CurrentValue = false,
    Callback = function(val)
        state.fly = val
    end
})

-- Fly Speed
TabMovement:CreateSlider({
    Name = "Fly Speed",
    Range = {1, 10},
    Increment = 1,
    CurrentValue = 2,
    Callback = function(val)
        state.flySpeed = val
    end
})

RunService.RenderStepped:Connect(function()
    if state.fly and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame = LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame + LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame.LookVector * state.flySpeed
    end
end)

-- WalkSpeed Boost
TabMovement:CreateSlider({
    Name = "WalkSpeed Boost",
    Range = {16, 200},
    Increment = 1,
    CurrentValue = 16,
    Callback = function(val)
        state.walkspeedBoost = val
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
            LocalPlayer.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = val
        end
    end
})

-- Noclip
TabMovement:CreateToggle({
    Name = "Noclip",
    CurrentValue = false,
    Callback = function(val)
        state.noclip = val
    end
})
RunService.Stepped:Connect(function()
    if state.noclip and LocalPlayer.Character then
        for _,part in pairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") and part.CanCollide then
                part.CanCollide = false
            end
        end
    end
end)

----------------------------------------------------
-- VISUAL
----------------------------------------------------
local TabVisual = Window:CreateTab("Visual")

-- ESP Players (Corrigido)
local espEnabled = false
local espConnections = {}

local function createESP(player)
    if player == LocalPlayer then return end
    if player.Character and not player.Character:FindFirstChild("RaelESP") then
        local highlight = Instance.new("Highlight")
        highlight.Name = "RaelESP"
        highlight.FillTransparency = 0.5
        highlight.OutlineTransparency = 0
        highlight.FillColor = Color3.fromRGB(0, 255, 0)
        highlight.Parent = player.Character
    end
end

local function removeESP(player)
    if player.Character and player.Character:FindFirstChild("RaelESP") then
        player.Character:FindFirstChild("RaelESP"):Destroy()
    end
end

local function enableESP()
    espEnabled = true
    -- aplicar ESP em todos os players
    for _,p in pairs(Players:GetPlayers()) do
        if p ~= LocalPlayer then
            createESP(p)
        end
    end
    -- se entrarem novos players
    espConnections["PlayerAdded"] = Players.PlayerAdded:Connect(function(p)
        p.CharacterAdded:Connect(function()
            task.wait(1)
            if espEnabled then
                createESP(p)
            end
        end)
    end)
    -- atualizar quando o player respawnar
    for _,p in pairs(Players:GetPlayers()) do
        espConnections[p.Name.."Char"] = p.CharacterAdded:Connect(function()
            task.wait(1)
            if espEnabled then
                createESP(p)
            end
        end)
    end
end

local function disableESP()
    espEnabled = false
    for _,p in pairs(Players:GetPlayers()) do
        removeESP(p)
    end
    for _,con in pairs(espConnections) do
        con:Disconnect()
    end
    espConnections = {}
end

-- Botão no menu
TabVisual:CreateToggle({
    Name = "ESP Players",
    CurrentValue = false,
    Callback = function(val)
        if val then
            enableESP()
            notify("ESP Ativado")
        else
            disableESP()
            notify("ESP Desativado")
        end
    end
})

-- FullBright
TabVisual:CreateToggle({
    Name = "FullBright",
    CurrentValue = false,
    Callback = function(val)
        state.fullbright = val
        if val then
            Lighting.Ambient = Color3.new(1,1,1)
            Lighting.Brightness = 5
            Lighting.FogEnd = 100000
        else
            Lighting.Ambient = Color3.new(0.5,0.5,0.5)
            Lighting.Brightness = 2
            Lighting.FogEnd = 1000
        end
    end
})

----------------------------------------------------
-- PROTECTIONS
----------------------------------------------------
local TabProt = Window:CreateTab("Protections")

TabProt:CreateToggle({Name="Anti-Sit v1",CurrentValue=false,Callback=function(v) notify("Anti-Sit v1 "..(v and "on" or "off")) end})
TabProt:CreateToggle({Name="Anti-Sit v2",CurrentValue=false,Callback=function(v) notify("Anti-Sit v2 "..(v and "on" or "off")) end})
TabProt:CreateToggle({Name="Anti-Hack",CurrentValue=false,Callback=function(v) notify("Anti-Hack "..(v and "on" or "off")) end})
TabProt:CreateToggle({Name="Anti-Collision",CurrentValue=false,Callback=function(v) notify("Anti-Collision "..(v and "on" or "off")) end})
TabProt:CreateToggle({Name="Anti-Void",CurrentValue=false,Callback=function(v) notify("Anti-Void "..(v and "on" or "off")) end})
TabProt:CreateToggle({Name="Anti-Audio All",CurrentValue=false,Callback=function(v) notify("Anti-Audio "..(v and "on" or "off")) end})
TabProt:CreateToggle({Name="Anti-Lag",CurrentValue=false,Callback=function(v) notify("Anti-Lag "..(v and "on" or "off")) end})

-- Gravity
TabProt:CreateSlider({
    Name = "Gravity",
    Range = {0, 500},
    Increment = 10,
    CurrentValue = Workspace.Gravity,
    Callback = function(val)
        Workspace.Gravity = val
    end
})

TabProt:CreateButton({
    Name = "Reset Gravity",
    Callback = function()
        Workspace.Gravity = state.gravity
        notify("Gravidade resetada")
    end
})

-- Teleport Target
TabTarget:CreateButton({
    Name = "Teleport para Alvo",
    Callback = function()
        if state.target and state.target.Character and state.target.Character:FindFirstChild("HumanoidRootPart") then
            LocalPlayer.Character:PivotTo(state.target.Character.HumanoidRootPart.CFrame + Vector3.new(2,0,2))
        end
    end
})

-- Copy Avatar
TabTarget:CreateButton({
    Name = "Copy Avatar",
    Callback = function()
        if state.target then 
            copyAvatar(state.target)
            notify("Avatar copiado de "..state.target.Name)
        end
    end
})

----------------------------------------------------
-- CONFIGURAÇÕES
----------------------------------------------------
local TabConfig = Window:CreateTab("Configurações")

-- Notificações
TabConfig:CreateToggle({
    Name = "Notify (Notificações)",
    CurrentValue = true,
    Callback = function(v)
        notify("Notificações "..(v and "Ativadas" or "Desativadas"))
    end
})
