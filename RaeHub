-- Souls Hub (versão final única)
-- Use no Delta Executor
-- Abas: Movement (com Gravity+FOV), Visual (com Low GFX), Configurações

-- carregar Rayfield (UI)
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Lighting = game:GetService("Lighting")
local Workspace = game:GetService("Workspace")

-- estado global
local state = {
    infiniteJump = false,
    walkspeed = 16,
    noclip = false,
    esp = false,
    fullbright = false,
    gravity = Workspace.Gravity or 196.2,
    -- Movement extras
    fov = workspace.CurrentCamera and workspace.CurrentCamera.FieldOfView or 70,
    -- Low GFX
    lowgfx = false,
    lowgfx_store = {}
}

-- notify wrapper (usa Rayfield se possível)
local function notify(msg)
    pcall(function()
        if Rayfield and Rayfield.Notify then
            Rayfield:Notify({ Title = "Souls Hub", Content = tostring(msg), Duration = 3 })
        else
            pcall(function()
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Souls Hub",
                    Text = tostring(msg),
                    Duration = 3
                })
            end)
        end
    end)
end

-- util: safe find humanoid
local function getHumanoid(c)
    if not c then return nil end
    for _,v in pairs(c:GetChildren()) do
        if v:IsA("Humanoid") then return v end
    end
    return nil
end

-- ================= Movement Tab (inclui Gravity e FOV) =================
local Window = Rayfield:CreateWindow({
    Name = "Souls Hub",
    LoadingTitle = "Souls Hub",
    LoadingSubtitle = "by Souls",
    ConfigurationSaving = { Enabled = true, FolderName = nil, FileName = "SoulsHubConfig" }
})

local TabMovement = Window:CreateTab("Movement")

-- Infinite Jump
TabMovement:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Callback = function(v) state.infiniteJump = v notify("Infinite Jump "..(v and "ativado" or "desativado")) end
})
UserInputService.JumpRequest:Connect(function()
    if state.infiniteJump and LocalPlayer.Character and getHumanoid(LocalPlayer.Character) then
        pcall(function() getHumanoid(LocalPlayer.Character):ChangeState("Jumping") end)
    end
end)

-- WalkSpeed Boost
TabMovement:CreateSlider({
    Name = "WalkSpeed Boost",
    Range = {16, 300},
    Increment = 1,
    CurrentValue = state.walkspeed,
    Callback = function(v)
        state.walkspeed = v
        if LocalPlayer.Character and getHumanoid(LocalPlayer.Character) then
            pcall(function() getHumanoid(LocalPlayer.Character).WalkSpeed = v end)
        end
    end
})

-- Noclip
TabMovement:CreateToggle({
    Name = "Noclip",
    CurrentValue = false,
    Callback = function(v) state.noclip = v notify("Noclip "..(v and "ativado" or "desativado")) end
})
RunService.Stepped:Connect(function()
    if state.noclip and LocalPlayer.Character then
        for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                pcall(function() part.CanCollide = false end)
            end
        end
    end
end)

-- Gravity slider + reset
TabMovement:CreateSlider({
    Name = "Gravity",
    Range = {0, 500},
    Increment = 1,
    CurrentValue = state.gravity,
    Callback = function(v)
        state.gravity = v
        pcall(function() Workspace.Gravity = v end)
    end
})
TabMovement:CreateButton({
    Name = "Reset Gravity",
    Callback = function()
        state.gravity = (Workspace and Workspace.Gravity) or 196.2
        pcall(function() Workspace.Gravity = state.gravity end)
        notify("Gravidade resetada para "..tostring(state.gravity))
    end
})

-- FOV slider
TabMovement:CreateSlider({
    Name = "FOV",
    Range = {35, 120},
    Increment = 1,
    CurrentValue = state.fov,
    Callback = function(v)
        state.fov = v
        pcall(function() if workspace.CurrentCamera then workspace.CurrentCamera.FieldOfView = v end end)
    end
})

-- ================= Visual Tab =================
local TabVisual = Window:CreateTab("Visual")

-- ESP (Highlight)
local espEnabled = false
local espConns = {}
local function createESP(p)
    if not p or p == LocalPlayer then return end
    pcall(function()
        if p.Character and not p.Character:FindFirstChild("SoulsESP") then
            local h = Instance.new("Highlight")
            h.Name = "SoulsESP"
            h.FillTransparency = 0.5
            h.OutlineTransparency = 0
            h.FillColor = Color3.fromRGB(0,255,0)
            h.Parent = p.Character
        end
    end)
end
local function removeESP(p)
    pcall(function()
        if p and p.Character and p.Character:FindFirstChild("SoulsESP") then
            p.Character:FindFirstChild("SoulsESP"):Destroy()
        end
    end)
end
local function enableESP()
    if espEnabled then return end
    espEnabled = true
    for _, p in pairs(Players:GetPlayers()) do createESP(p) end
    espConns.PlayerAdded = Players.PlayerAdded:Connect(function(pl)
        espConns[pl.Name.."Char"] = pl.CharacterAdded:Connect(function() task.wait(0.5) if espEnabled then createESP(pl) end end)
    end)
    for _, p in pairs(Players:GetPlayers()) do
        espConns[p.Name.."Char"] = p.CharacterAdded:Connect(function() task.wait(0.5) if espEnabled then createESP(p) end end)
    end
end
local function disableESP()
    if not espEnabled then return end
    espEnabled = false
    for _, p in pairs(Players:GetPlayers()) do removeESP(p) end
    for k,con in pairs(espConns) do pcall(function() con:Disconnect() end) end
    espConns = {}
end

TabVisual:CreateToggle({
    Name = "ESP Players",
    CurrentValue = false,
    Callback = function(v)
        if v then enableESP() notify("ESP ativado") else disableESP() notify("ESP desativado") end
    end
})

-- FullBright
local originalLighting = {
    Brightness = Lighting.Brightness,
    ClockTime = Lighting.ClockTime or 12,
    GlobalShadows = Lighting.GlobalShadows,
    OutdoorAmbient = Lighting.OutdoorAmbient,
    FogEnd = Lighting.FogEnd
}
local function setFullBright(on)
    if on then
        pcall(function()
            Lighting.Brightness = 2
            Lighting.ClockTime = 14
            Lighting.FogEnd = 1e6
            Lighting.GlobalShadows = false
            Lighting.OutdoorAmbient = Color3.new(1,1,1)
        end)
    else
        pcall(function()
            Lighting.Brightness = originalLighting.Brightness
            Lighting.ClockTime = originalLighting.ClockTime
            Lighting.FogEnd = originalLighting.FogEnd
            Lighting.GlobalShadows = originalLighting.GlobalShadows
            Lighting.OutdoorAmbient = originalLighting.OutdoorAmbient
        end)
    end
end
TabVisual:CreateToggle({
    Name = "FullBright",
    CurrentValue = false,
    Callback = function(v) state.fullbright = v setFullBright(v) notify("FullBright "..(v and "ativado" or "desativado")) end
})

-- Low GFX (economia gráfica) - tenta desativar emissões/partículas e reduzir efeitos
local function enableLowGFX()
    if state.lowgfx then return end
    state.lowgfx_store = { Lighting = {}, Particles = {} }
    -- salvar e ajustar Lighting
    pcall(function()
        state.lowgfx_store.Lighting.Brightness = Lighting.Brightness
        state.lowgfx_store.Lighting.GlobalShadows = Lighting.GlobalShadows
        Lighting.Brightness = 0.7
        Lighting.GlobalShadows = false
        Lighting.FogEnd = 1e6
    end)
    -- desativar ParticleEmitters, Trails, Sparks, Beams, Smoke, Fire
    for _,obj in pairs(Workspace:GetDescendants()) do
        pcall(function()
            if obj:IsA("ParticleEmitter") then
                state.lowgfx_store.Particles[obj] = {Class="ParticleEmitter", Enabled = obj.Enabled}
                obj.Enabled = false
            elseif obj:IsA("Trail") then
                state.lowgfx_store.Particles[obj] = {Class="Trail", Enabled = obj.Enabled}
                obj.Enabled = false
            elseif obj:IsA("Sparkles") then
                state.lowgfx_store.Particles[obj] = {Class="Sparkles", Enabled = obj.Enabled}
                obj.Enabled = false
            elseif obj:IsA("Beam") then
                state.lowgfx_store.Particles[obj] = {Class="Beam", Enabled = obj.Enabled}
                obj.Enabled = false
            elseif obj:IsA("Smoke") then
                state.lowgfx_store.Particles[obj] = {Class="Smoke", Enabled = obj.Enabled}
                obj.Enabled = false
            elseif obj:IsA("Fire") then
                state.lowgfx_store.Particles[obj] = {Class="Fire", Enabled = obj.Enabled}
                obj.Enabled = false
            end
        end)
    end
    state.lowgfx = true
    notify("Low GFX ativado")
end

local function disableLowGFX()
    if not state.lowgfx then return end
    -- restaurar Lighting
    pcall(function()
        if state.lowgfx_store.Lighting then
            Lighting.Brightness = state.lowgfx_store.Lighting.Brightness or Lighting.Brightness
            Lighting.GlobalShadows = state.lowgfx_store.Lighting.GlobalShadows or Lighting.GlobalShadows
            Lighting.FogEnd = originalLighting.FogEnd or Lighting.FogEnd
        end
    end)
    -- tentar reativar partículas (onde possível)
    for obj,info in pairs(state.lowgfx_store.Particles or {}) do
        pcall(function() if obj and obj.Parent then obj.Enabled = info.Enabled end end)
    end
    state.lowgfx_store = {}
    state.lowgfx = false
    notify("Low GFX desativado")
end

TabVisual:CreateToggle({
    Name = "Low GFX",
    CurrentValue = false,
    Callback = function(v)
        if v then enableLowGFX() else disableLowGFX() end
    end
})

-- ================= Config Tab =================
local TabConfig = Window:CreateTab("Configurações")
TabConfig:CreateToggle({
    Name = "Notify (Notificações)",
    CurrentValue = true,
    Callback = function(v) notify("Notificações "..(v and "Ativadas" or "Desativadas")) end
})

-- anti-afk (desativa conexões de idled quando possível)
pcall(function()
    for _,c in pairs(getconnections(LocalPlayer.Idled or function() end)) do
        pcall(function() c:Disable() end)
    end
end)

-- finalize
notify("Souls Hub carregado — Movement (com Gravity+FOV) e Visual (Low GFX) prontos")
